[l] gatling unterstuetzt ja seit einer Weile PolarSSL, und das ist jetzt von ARM uebernommen worden und heisst jetzt mbedTLS. Ich habe mich heute mal hingesetzt und wollte gatling anpassen, aber musste dabei feststellen, dass nach all dem Gehampel wegen umbenannten Funktionen und Konstanten, nach dem Splitten von Kontext und Konfiguration, nach all dem â€¦ funktioniert es immer noch nicht. Der Zertifikat-Parse-Code sagt immer, das Format sei falsch.Es gibt zwei Arten von Parse-Routine, einmal "hier ist die Datei, mach mal" und einmal "hier ist ein char* und ein size_t, mach mal". Die Version mit der Datei ruft intern die andere Version auf.Nun wollte ich, dass das User-Interface zwischen den SSL-Versionen in gatling nicht unnoetig verschieden ist, daher nimmt mein PolarSSL-Code ein OpenSSL-Style server.pem (key und cert hintereinander gepasted in einer Textdatei), mappt das read-only in den Speicher und uebergibt dann die jeweiligen Speicherregionen an die Parse-Funktion mit Zeiger und Laenge.Und die failed jetzt ploetzlich. Stellt sich raus, dass der Code jetzt prueft, ob das letzte Zeichen im reingereichten Buffer ein 0-Byte ist.Also mal abgesehen davon, dass dieser Check nicht dokumentiert ist, ist er auch voellig hirnrissig, denn dafuer uebergibt man ja gerade eine Laenge, damit man da kein In-Band-Signalling fuer den Terminator braucht. Aber in meinem Fall mit dem read-only mmap kann ich auch gar kein Null-Byte da hin tun. Ich muesste also die Daten hin- und her kopieren.Klarer Fall von "gut gemeint", wuerde ich sagen. Ich habe mal einen Bug gefiled. Da das mit dem 0-Byte auch nicht dokumentiert ist, kann man es ja auch gefahrlos wieder rauskanten. Ich hoffe, das tun die dann zeitnah.
