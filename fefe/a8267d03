[l] Ich habe mich hier und im gcc Bugtracking-System schon laenglich darueber aufgeregt, dass C-Compiler angefangen haben, "Optimierungen" auf Basis von strikter Auslegung des Standards zu machen. C hat diverse Dinge nicht klar spezifiziert, unter anderem damit man C auch auf esoterischen Architekturen implementieren kann, und damit Compiler-Autoren mehr Freiheit haben, wie sie Dinge implementieren wollen.Insofern koennte man argumentieren, dass die Compiler-Leute ja in gewissem Sinne genau das tun. Aber sie haben es halt so gemacht, dass vorher funktionierende Programme ploetzlich zu funktionieren aufgehoert haben. Und das auch noch an Stellen, an denen der Code fuer das Verhindern von Sicherheitsluecken da war; da haben die Compiler dann angefangen, die Sicherheitschecks wegzumachen.Zu meiner Ãœberraschung sind die Rants teilweise angekommen, und die aktuellen Versionen von gcc und clang sind weniger aggressiv als fruehere Versionen, aber die Buechse der Pandora ist jetzt halt offen, und es ist nicht wirklich absehbar, wie sich das langfristig entwickeln soll.Ich erzaehle das alles, weil ich gerade dieses schoene Paper zu dem Thema gefunden habe, von den Leuten hinter GNU Forth, die schoen beschreiben, dass man beispielsweise eine Funktion wie memmove (seit ewigen Zeiten Teil des C-Standards) nicht in C implementieren kann, ohne formaljuristisch gesehen undefiniertes Verhalten zu erzeugen. Daher: Klare Leseempfehlung!
