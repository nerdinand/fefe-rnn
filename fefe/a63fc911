[l] Zum Re-Keying kam folgender sachdienlicher Hinweis rein:Der re-keying code in vielen libraries, allermindestens openssl, nss,
gnutls, ist total kaputt.  Wir haben das ueber Jahre in postgres (nur
openssl zu dem Zeitpunkt) verwendet, und haben unmengen von Bugs
gefunden.  Und weitgehend sind die immer noch vorhanden.Das reicht von "passiert nichts mehr ueber der Verbindung" weil der
interne Status keinen Sinn mehr macht bis zu crashes.  In postgres war
das wohl besonders schlimm weil wir a) non-blocking IO verwendet haben
und openssl da noch weniger getestet ist b) teilweise sehr viele Daten
transferiert werden (replication laeuft auch ueber so eine Verbindung und
eine Verbindung kann terrabytes ueberleben).Und zu meinem Bauchgefuehl, dass dann ja auch der initiale Handshake im Arsch sein muesste, schreibt er:Zumindest in openssl wuerde ich sagen dass das nicht ganz so ist -
waehrend die renegotiation in progress ist muss openssl auch noch damit
zurechtkommen dass Daten mit dem alten Schluessel ankommen.  Ich finde es
schwer dem openssl code wirklich zu folgen, aber soweit ich es
verstanden habe sind schlichtweg nicht alle korrekt implementiert.Man bemerke auch dass tls 1.3 key renegotiation komplett rausschmeisst.Ich waere *sehr* verwundert wenn der "live" renegotiation code in openssl
nicht ein paar exploitable bugs haette.Oha. Mein Verstaendnis war, dass man renegotiation benutzt, um in TLS auszuschliessen, dass die Cipher-Suites in der initialen (unverschluesselten) Handshake-Negotiation von einem aktiven Angreifer ausgeduennt worden sind. D.h. wenn man Renegotiation wegschmeisst, man messbar Sicherheit einbuesst. Aber vielleicht habe ich das falsch verstanden.Update: Ein anderer Einsender erklaert:bitte nicht Re-Negotiation mit Re-Keying verwechseln.Re-Keying ist auch in TLS 1.3 noch drin.Und das ist auch gut so, den im Gegensatz zur Re-Negotiation ist Re-Keying bei vielen (den meisten?) Krypto-Algorithmen einfach notwendig, da mit einem Key nur eine begrenzte Menge an Daten verschluesselt werden darf, bevor das Verfahren unsicher wird. (z.B. weil dann die Wahrscheinlichkeit, dass zufaellig gewaehlte Nonces per Birthday-Paradoxon mehrfach verwendet werden, zu hoch wird.)
