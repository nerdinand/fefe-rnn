[l] Ich hatte ja bei der Heise-Tour am Ende ein paar Bonusfolien dabei, u.a. auch ueber Machine Learning. Da gibt es noch einen Aspekt, der nicht in den Folien war. Den habe ich teilweise explizit dazu gesagt, teilweise nicht.Traditionelle Software wird entwickelt, konstruiert. Das ist am Ende eine Konstruktion. Wenn etwas fehlschlaegt, kann man gucken, welcher Teil der Konstruktion das Problem war, und das reparieren. Man kann das debuggen.Das ist bei Machine Learning nicht mehr so. Neuronale Netze sind nicht konstruiert, sondern werden trainiert. Wenn da was falsch laeuft, dann kann man das nicht debuggen. Man kann nur nach-trainieren. Und laeuft dabei Gefahr, bisher erlerntes wieder zu ent-lernen.Nun kann man bei den ganzen Problemen, die wir mit Software haben, zu dem Schluss kommen, dass wir das alles so wenig im Griff haben, dass Debugbarkeit vielleicht eh nicht so wichtig ist. Ist eh alles staendig kaputt, und so. Dem wuerde ich gerne laut widersprechen. Das ist unser einziger Notnagel, der uns vom dem Abgrund fernhaelt.Und es gibt noch einen weiteren Aspekt. Wenn wir ein neuronales Netz trainieren, und es ist besonders gut beim Erkennen von irgendwas, dann koennen wir davon nicht lernen, auch besser zu werden. Konstruierte Dinge kann man reverse engineeren. Neuronale Netze nicht. Die kann man nur anwenden und trainieren. Das ist alles.Ich linke so gut wie nie auf den Technology Review, aber heute mache ich mal eine Ausnahme. Wir bewegen uns mit hoher Geschwindigkeit auf eine Zukunft zu, in der wir von Maschinen umgeben sind, denen wir nicht vertrauen koennen, und die wir nicht verstehen koennen. Der Zeitpunkt zum Kurswechsel ist jetzt.
