[l] Ich hatte diese Tage einen Heureka-Moment, den ich mal mit euch teilen will. Ich hatte ja auf dem 32c3 einen Vortrag gehalten, in dem ich ein Broker-Modell vorschlug. Die Idee ist, dass du einen Prozess hast, bei dem du dir nicht sicher bist, ob er nicht doch noch hackbare Sicherheitsluecken hat, und du moechtest verhindern, dass der Prozess dann wild im Dateisystem herumschreiben kann.Ein Ansatz dazu waere, dass man dem Prozess per LD_PRELOAD eine Shared Library reindrueckt, die dann open() ueberschreibt mit einer Version, die ueber einen vorher etablierten Unix Domain Socket einen Broker-Prozess bittet, fuer ihn die Datei zu oeffnen. Der Broker prueft dann den Dateinamen und die gewuenschten Zugriffsrechte (beispielsweise anhand einer Konfigurationsdatei), und wenn das OK ist, dann macht er die Datei auf und schiebt den Deskriptor ueber den Unix Domain Socket zurueck. Daher auch ein Unix Domain Socket als Kommunikationsweg, denn da kann man Deskriptoren rueberschieben.Das offensichtliche Problem mit diesem Ansatz war immer, dass man mit LD_PRELOAD zwar verhindern kann, dass jemand versehentlich open() aufruft, aber nicht dass jemand von Hand den Syscall absetzt. Da gab es dann bisher so Ideen von wegen "der Broker haengt sich mit ptrace an den Prozess und killt ihn, wenn er open() aufruft". Das geht, aber ptrace â€¦ nunja. Gut, nicht dass Seccomp so viel weniger uebel ist als API, aber mit Seccomp kann man in einem Initialisierer in der Shared Library (jetzt kommt die Einsicht) auch einen Seccomp-Filter einrichten, der den open-Syscall verbietet. Der sollte dann natuerlich auch andere Dinge verbieten (ich persoenlich bin an der Stelle immer ein Freund von whitelisting statt blacklisting).Aber mein Punkt ist: Man kann jetzt mit LD_PRELOAD dank Seccomp tatsaechlich einen fremden Prozess dazu bringen, dass er (sogar halbwegs transparent) keine boesen Dateisystemzugriffe macht.Gut, der Teufel liegt natuerlich wie immer im Detail. Dann muss man auch schauen, dass man chdir und fchdir und so folgt, und wenn man Lesezugriffe auch verhindern will, dann muss man auch stat und co abfangen.Aber hey, wenn es einfach waere, waere es nicht interessant :-)Man kann das jetzt machen. Ich habe mal einen kleinen Proof of Concept gehackt, die das fuer open() tut. Mal gucken, ob ich den in einen verwendbaren Zustand kriege und dann veroeffentlichen kann.
