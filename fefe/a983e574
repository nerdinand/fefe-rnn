[l] Ich ueberlege seit einer Weile, wie ich bei gatling weniger Syscalls machen kann. Das Konzept von gatling ist, dass ein HTTP-Request nach /foo/bar.html auf dem Host www.fefe.de die Datei www.fefe.de:80/foo/bar.html.gz zu oeffnen versucht (wenn der Browser gzip unterstuetzt, was sie alle tun), und wenn die Datei nicht existiert, dann nimmt er die ohne .gz. Wenn www.fefe.de:80 nicht existiert, dann gibt es noch einen Fallback-Versuch auf default, d.h. default/foo/bar.html.gz.Wenn man das nicht explizit ausgeschaltet hat, probiert er es dann nochmal ganz ohne Verzeichnisnamen, d.h. direkt foo/bar.html.gz. Das ist schoen flexibel, aber der Worst case sind sechs open-Syscalls.Um das ein bisschen einzuschraenken, probiert gatling www.fefe.de:80 bzw. default per chdir, nicht als Pfadbestandteil von open. Aber da ist immer noch viel Optimierungspotential.Die offensichtliche Optimierung waere, dass man einen Cache einfuehrt. Die Dateien nicht immer gleich wieder zumachen und neu oeffnen, sondern offen behalten. Das haette auch gleich den Vorteil, dass wenn fuenf Leute die selbe Datei downloaden, dass ich die dann nur einmal oeffnen muss, und nur ein Handle ausgeben muss. Der Nachteil waere, neben der dann noetigen Buchhaltung, dass ich mitkriegen muss, wenn eine der Dateien sich aendert oder weg ist. Und das stellt sich als recht aufwendig heraus.Das Standard-API unter Unix ist, einfach alle paar Sekunden per stat() nochmal nachzugucken. Unix Linux gibt es ein Spezial-API, mit dem man sich unterrichten lassen kann, wenn sich eine Datei aendert. Das klingt gut, aber es ist nicht das, was ihr euch jetzt intuitiv vorstellen moegt.Nehmen wir mal an, ich oeffne die Datei www.fefe.de:80/foo/bar.html.gz und nutze dieses API, um ueber Änderungen informiert zu werden. Nehmen wir weiter an, eines der Verzeichnisse in dem Pfad wird umbenannt. Dann wuerde mir dieses API nicht sagen, dass sich die Datei geaendert hat, denn sie hat sich ja nicht geaendert. Sie ist nur unter dem Namen nicht mehr ansprechbar. Schlimmer noch: Was, wenn es www.fefe.de:80 nicht gab und gatling daher default genommen hat, und dann legt jemand ein Verzeichnis oder Symlink unter dem Namen an?Ich muesste also mit dem Spezial-API nicht nur die Datei sondern alle Pfade auf dem Weg ueberwachen. Das ist ja schon mal echt unschoen.Aber jetzt denken wir mal einen Schritt weiter. Was wenn einer der Pfade ein Symlink ist, und der verweist, sagen wir mal, auf /mnt/platz, und jetzt aendert jemand unter /mnt die Namen, so dass sich das Ziel des Symlinks aendert?Mir erscheint gerade, dass dieses API zwar in der Theorie schoen klingt, aber in der Praxis ungeeignet ist.Ein Ausweg waere vielleicht, dass man einfach alle gecacheten Deskriptoren nach 10 Sekunden wegschmeisst. Aber das ist ja iiih-baeh.Kennt zufaellig jemand einen httpd, der so eine Optimierung, wie ich sie mir vorstelle, implementiert hat?Update: nginx hat so eine Option, und lighttpd hat einen stat()-Cache. Allerdings sind die beide so Heuristiken, die ich gerne vermieden haette. Vielleicht bin ich da unrealistisch, aber mein Anspruch an ein modernes Betriebssystem von 2016 waere, dass man da ohne so Gammel-Heuristiken und „na ich liefer doch aber hoechstens 10 Sekunden lang was falsches aus“ arbeiten kann.
