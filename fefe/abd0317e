[l] Ãœbrigens, falls sich jemand aergert, dass gcc und clang keine Warnung fuer Variablen haben, die deklariert und beschrieben aber nie gelesen werden: Bei clang gibt es das optional als Modul fuer statische Analyse. Das besteht schoen diskordianisch aus zwei Skripten, eines in Perl zum Einsammeln der Daten, und eines in Python zum Anzeigen der Fehler (das startet einen Webserver auf localhost, der im browser dann den Code mit Annotationen anzeigt). Ist eigentlich ziemlich cool.Der meldet auch Schreibzugriffe, die gleich wieder ueberschrieben werden, ohne dass dazwischen jemand liest.Mir ist ja nicht klar, wieso man dafuer statische Analyse braucht und der Compiler nicht gleich was sagt. Aber hey, solange ich ueberhaupt an die Warnungen rankomme, ist es mir recht.Ich finde ja: Immer wenn der Compiler ein Stueck Code wegoptimiert, dann sollte er eine Warnung anzeigen. Der Programmierer hat sich wahrscheinlich was dabei gedacht, den Code da hin zu tun, und wuerde vermutlich gerne informiert werden, wenn es wegoptimiert wird.Update: Hmm, das stimmt gar nicht. gcc warnt bei unbenutzten Variablen, und bei Variablen, die nur geschrieben werden. Die Faelle, die die statische Analyse fuer clang zusaetzlich findet, sind sowas wie: Variable geht out of scope, niemand haelt einen Zeiger, und der letzte Zugriff war ein Schreibzugriff. Dead Store ist der Term dafuer in der Compilerwelt.
